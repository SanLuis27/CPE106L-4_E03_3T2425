PROGRAMMING PROBLEM 1

def mean(numbers):
  if not numbers:
    return 0
  return sum(numbers) / len(numbers)


def median(numbers):
  if not numbers:
    return 0
  numbers.sort()
  mid = len(numbers) // 2
  if len(numbers) % 2 == 0:
    return (numbers[mid - 1] + numbers[mid]) / 2
  else:
    return numbers[mid]


def mode(numbers):
  if not numbers:
    return 0
  freq = {}
  for num in numbers:
    freq[num] = freq.get(num, 0) + 1
  max_freq = max(freq.values())
  for key in freq:
    if freq[key] == max_freq:
      return key


def main():
  data = [10, 20, 20, 30, 40]
  print("Mean:", mean(data))
  print("Median:", median(data))
  print("Mode:", mode(data))


if __name__ == "__main__":
  main()


PROGRAMMING PROBLEM 2

def main():
  filename = input("Enter the filename: ")
  try:
    with open(filename, 'r', encoding='utf-8') as file:
      lines = file.readlines()
    total_lines = len(lines)
    print(f"\nFile '{filename}' loaded successfully.")
    print(f"Total number of lines: {total_lines}\n")
    while True:
      try:
        line_num = int(input(f"Enter a line number (1 to {total_lines}, 0 to quit): "))
        if line_num == 0:
          print("Exiting program.")
          break
        elif 1 <= line_num <= total_lines:
          print(f"Line {line_num}: {lines[line_num - 1].rstrip()}\n")
        else:
          print(f"Invalid line number. Please enter between 1 and {total_lines}.\n")
      except ValueError:
        print("Please enter a valid number.\n")
  except FileNotFoundError:
    print(f"File '{filename}' not found.")
if __name__ == "__main__":
  main()


PROGRAMMING PROBLEM 3

import random


def getWords(filename):
  """Reads words from a file and returns them as a tuple."""
  words = []
  try:
    with open(filename, 'r', encoding='utf-8') as file:
      for line in file:
        word = line.strip()
        if word:
          words.append(word.upper())
  except FileNotFoundError:
    print(f"Error: File '{filename}' not found.")
  return tuple(words)


# Load vocabulary from text files
articles = getWords("articles.txt")
nouns = getWords("nouns.txt")
verbs = getWords("verbs.txt")
prepositions = getWords("prepositions.txt")


def sentence():
  """Builds and returns a sentence."""
  return nounPhrase() + " " + verbPhrase()


def nounPhrase():
  """Builds and returns a noun phrase."""
  return random.choice(articles) + " " + random.choice(nouns)


def verbPhrase():
  """Builds and returns a verb phrase."""
  return random.choice(verbs) + " " + nounPhrase() + " " + \
      prepositionalPhrase()


def prepositionalPhrase():
  """Builds and returns a prepositional phrase."""
  return random.choice(prepositions) + " " + nounPhrase()


def main():
  """Allows the user to input the number of sentences to generate."""
  number = int(input("Enter the number of sentences: "))
  for count in range(number):
    print(sentence())


if __name__ == "__main__":
  main()
